* About

EmacsLisp with slightly less parenthesis!

* Installation

Currently not yet available in other form but from the git repository.
Just dump `lex-bindings.el` in your load path somewhere, use package-install-vc,
or some installer of your choice.

* How does it looks like?

#+begin_src emacs-lisp :tangle yes
(lex (x 1
      y 2
      z 3)
  (list x y z)) => (list 1 2 3)


(lex-if (x 1
         y (1+ x)
         z (> x y))
  (message "than part")
  (message "else part")) => else part

(lex-when (x t
           y t
           z (and x y))
  z) => t)

(lex-while (x 10
            run t)
  (setq x (1- x))
  (when (< x 5)
    (setq run nil))) => nil

(let ((s "no-run"))
  (lex-while (x (> 1 2))
    (setq s "I run!"))
  s) => "no-run"
#+end_src


* What it does?

When I use let, if-let, when-let and while-let I percieve it can be a bit noisy with all the parenthesis involved. I wantd to
experiment and see if it is a bit better if we let-form was written as setq/setf. Consider:

#+begin_src emacs-lisp
(let ((var1 (form1))
      (var2 (form2))
      ...
      (varN (formN)))
  ....)
#+end_src

Each binding in the lambda list is a pair. If we remove the parenthesis around each pair we get a property list similar as is used by setq/setf:

#+begin_src emacs-lisp
(let (var1 (form1)
      var2 (form2)
      ...
      varN (formN))
  ....)
#+end_src

It does not seem like much, but I find it is a bit less noisy too look at. The cons is that one can't have trivially a single expression of form (if-let some-var do-this do-that), but that form is reduced to simple if, so it is not very
interesting for if-let cover that use-case either.

I call it for 'lex', as shorter of 'lexical environment', and it is also close to 'let'. I don't have a better name, unfortunately.

T note is, I have certainly nothing against parethesis in Lisp, on the contrary. However, if things can be simplified, why not?

The cost at runtime is virtually none, they are extremely thin wrapper over let, if, when and while forms from EmacsLisp. I use let* for all of those on the purpose. It is though trivial to have both non-star and star-forms if desired.

* Acknowledgements

I am using test code by S. Magnar from s.el. I think his test stuff is really awesome addition to vanilla Ert framework included in Emacs.

* Contribute

Yes, please do. A syntax-sugar that saves typing!

You'll find the repo at:

    https://github.com/amno1/lex-bindings

Run the tests with

    ./run-tests.sh

* License

Copyright (C) 2024 Arthur Miller

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
